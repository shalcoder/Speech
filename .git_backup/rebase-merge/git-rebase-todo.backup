pick 48d86aabaeafe513bdeb4913affb8b6b765103ec # Milestone 1 : Implemented continous recognition demo and  Web Application for our project. - Vishal-M
pick 910a7aa3342855bd8badf25f37c5dbddfba7a293 # Milestone 1 : Implemented continuous recognition demo and Web Application for our project. - Vishal-M
pick 8f55fd9b3aef2f85601924bbca63475b2029ab4c # Milestone 1 : Implemented continuous recognition demo and Web Application for our project. - Vishal-M
pick f848bd8746296618ce150f48923544053093c7a9 # Initial commit for Speech project

# Rebase 6ca99a6..f848bd8 onto 6ca99a6 (4 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
